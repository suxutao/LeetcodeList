#include "../../../stdc.h"
using namespace std;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
public:
    vector<bool>vis;
    vector<int>xuan;
    map<int,int>m;
    int fa[305];
    int find_set(int x){
        return fa[x]==x?x:fa[x]= find_set(fa[x]);
    }
    void merge_set(int x,int y){
        x= find_set(x);
        y= find_set(y);
        if (x!=y)
            fa[x]=y;
    }
    int dfs(int x,vector<vector<int>>& g){
        int sum=1;
        for (int i = 0; i < g.size(); ++i) {
            if (i==x)
                continue;
            if (g[x][i]==1&&!vis[i]){
                merge_set(i,x);
                vis[i]=1;
                sum+=dfs(i,g);
            }
        }
        return sum;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int n=graph.size(),ans=initial[0],MAX=0;
        vis.resize(n);
        memset(fa,0, sizeof fa);
        for (int i = 0; i < n; ++i) {
            fa[i]=i;
        }
        for (auto &i: initial){
            if (!vis[i]) {
                vis[i]=1;
                dfs(i,graph);
            }
        }
        for (auto i: initial){
            i= find_set(i);
            m[i]++;
        }
        for (auto &i: m){
            if (i.second==1)
                xuan.push_back(i.first);
        }
        sort(xuan.begin(), xuan.end());
        for (auto &i: xuan){
            vis.assign(n,0);
            vis[i]=1;
            int temp= dfs(i,graph);
            if (temp>MAX){
                MAX=temp;
                ans=i;
            }
        }
        return ans;
    }
};
//leetcode submit region end(Prohibit modification and deletion)


int main(){
    return 0;
}